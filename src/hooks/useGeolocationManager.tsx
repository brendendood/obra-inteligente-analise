import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

export const useGeolocationManager = () => {
  const [isUpdating, setIsUpdating] = useState(false);
  const { toast } = useToast();

  const forceUpdateUserGeolocation = async (userEmail: string) => {
    setIsUpdating(true);
    try {
      console.log('üîÑ For√ßando atualiza√ß√£o de geolocaliza√ß√£o para:', userEmail);
      
      const { data, error } = await supabase.rpc('force_user_geolocation_update', {
        user_email: userEmail
      });

      if (error) {
        console.error('‚ùå Erro ao for√ßar atualiza√ß√£o:', error);
        toast({
          title: "Erro na atualiza√ß√£o",
          description: "N√£o foi poss√≠vel atualizar a geolocaliza√ß√£o",
          variant: "destructive",
        });
        return { success: false, error };
      }

      const result = data as any;
      if (!result.success) {
        toast({
          title: "Falha na atualiza√ß√£o",
          description: result.error || "Erro desconhecido",
          variant: "destructive",
        });
        return { success: false, error: result.error };
      }

      toast({
        title: "Geolocaliza√ß√£o atualizada",
        description: `IP ${result.ip_address} sendo processado`,
      });

      console.log('‚úÖ Atualiza√ß√£o de geolocaliza√ß√£o iniciada:', result);
      return { success: true, data: result };
    } catch (error) {
      console.error('‚ùå Erro na fun√ß√£o de atualiza√ß√£o:', error);
      toast({
        title: "Erro no sistema",
        description: "Falha ao executar atualiza√ß√£o",
        variant: "destructive",
      });
      return { success: false, error };
    } finally {
      setIsUpdating(false);
    }
  };

  const updateAllGeolocations = async () => {
    setIsUpdating(true);
    try {
      console.log('üîÑ Atualizando geolocaliza√ß√µes de todos os usu√°rios...');
      
      const { data, error } = await supabase.functions.invoke('ip-geolocation', {
        body: { 
          action: 'update_all',
          force: true 
        }
      });

      if (error) {
        console.error('‚ùå Erro na atualiza√ß√£o em lote:', error);
        toast({
          title: "Erro na atualiza√ß√£o",
          description: "N√£o foi poss√≠vel atualizar as geolocaliza√ß√µes",
          variant: "destructive",
        });
        return { success: false, error };
      }

      toast({
        title: "Geolocaliza√ß√µes atualizadas",
        description: "Processo de atualiza√ß√£o iniciado",
      });

      console.log('‚úÖ Atualiza√ß√£o em lote iniciada:', data);
      return { success: true, data };
    } catch (error) {
      console.error('‚ùå Erro na atualiza√ß√£o em lote:', error);
      toast({
        title: "Erro no sistema",
        description: "Falha ao executar atualiza√ß√£o em lote",
        variant: "destructive",
      });
      return { success: false, error };
    } finally {
      setIsUpdating(false);
    }
  };

  return {
    forceUpdateUserGeolocation,
    updateAllGeolocations,
    isUpdating
  };
};