import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Handle CORS preflight requests
serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { message, conversationId, projectId } = await req.json();
    
    // Initialize Supabase client with request authorization
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const authHeader = req.headers.get('Authorization');
    
    const supabase = createClient(supabaseUrl, supabaseServiceKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      },
      global: {
        headers: {
          Authorization: authHeader,
        },
      },
    });

    // Authenticate user
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError || !user) {
      return new Response(JSON.stringify({ error: 'Unauthorized' }), {
        status: 401,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Get or create conversation
    let conversation;
    if (conversationId) {
      const { data, error } = await supabase
        .from('ai_conversations')
        .select('*')
        .eq('id', conversationId)
        .eq('user_id', user.id)
        .single();
      
      if (error || !data) {
        return new Response(JSON.stringify({ error: 'Conversation not found' }), {
          status: 404,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        });
      }
      conversation = data;
    } else {
      // Create new conversation
      const { data, error } = await supabase
        .from('ai_conversations')
        .insert({
          user_id: user.id,
          project_id: projectId,
          title: message.substring(0, 50) + (message.length > 50 ? '...' : '')
        })
        .select()
        .single();
      
      if (error || !data) {
        return new Response(JSON.stringify({ error: 'Failed to create conversation' }), {
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        });
      }
      conversation = data;
    }

    // Save user message
    await supabase
      .from('ai_messages')
      .insert({
        conversation_id: conversation.id,
        content: message,
        role: 'user'
      });

    // Get project data if projectId is provided
    let project = null;
    if (projectId) {
      const { data: projectData, error: projectError } = await supabase
        .from('projects')
        .select('*')
        .eq('id', projectId)
        .eq('user_id', user.id)
        .single();

      if (!projectError && projectData) {
        project = projectData;
      }
    }

    // Get conversation history for context
    const { data: messageHistory } = await supabase
      .from('ai_messages')
      .select('content, role')
      .eq('conversation_id', conversation.id)
      .order('created_at', { ascending: true })
      .limit(10);

    let aiResponse: string;

    // Check if OpenAI API key is available
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY');
    
    if (openaiApiKey) {
      try {
        // Prepare messages for OpenAI
        const messages = [
          {
            role: 'system',
            content: `Voc√™ √© um Engenheiro Civil e Arquiteto Senior especializado em projetos de constru√ß√£o no Brasil, atuando como assistente t√©cnico da plataforma MadenAI.

ESPECIALIZA√á√ÉO E CONHECIMENTOS:
- Engenharia Estrutural, Funda√ß√µes, Geotecnia
- Arquitetura Residencial e Comercial  
- Or√ßamenta√ß√£o, Cronogramas e Planejamento
- Normas ABNT (NBR 6118, 6120, 6122, 15575, 9050, etc.)
- C√≥digo de Obras Municipal e Estadual
- Materiais de Constru√ß√£o e Tecnologias Construtivas
- Sustentabilidade e Efici√™ncia Energ√©tica

${project ? `
üìã PROJETO ATUAL EM AN√ÅLISE:
- Nome: ${project.name}
- Tipologia: ${project.project_type || 'N√£o especificado'}
- √Årea Constru√≠da: ${project.total_area ? project.total_area + 'm¬≤' : 'A definir'}
- Localiza√ß√£o: ${[project.city, project.state, project.country].filter(Boolean).join(', ') || 'N√£o informado'}
- Or√ßamento Previsto: ${project.estimated_budget ? 'R$ ' + project.estimated_budget.toLocaleString('pt-BR') : 'Em elabora√ß√£o'}

üìÑ DOCUMENTOS T√âCNICOS:
${project.extracted_text ? `Informa√ß√µes extra√≠das: ${project.extracted_text.substring(0, 500)}...` : 'Aguardando documentos t√©cnicos'}

üìä AN√ÅLISE T√âCNICA:
${project.analysis_data ? `Dados processados: ${JSON.stringify(project.analysis_data)}` : 'An√°lise em andamento'}
` : 'üèóÔ∏è Modo Consultoria Geral - Pronto para orienta√ß√£o t√©cnica especializada'}

DIRETRIZES DE RESPOSTA:
‚úì Seja t√©cnico, preciso e fundamentado em normas
‚úì Cite normas ABNT relevantes quando aplic√°vel
‚úì Forne√ßa valores realistas de materiais e custos (mercado brasileiro 2024)
‚úì Considere aspectos de seguran√ßa, durabilidade e sustentabilidade
‚úì Use linguagem profissional mas acess√≠vel
‚úì Quando poss√≠vel, sugira alternativas e melhores pr√°ticas

Responda como um profissional experiente com CRA/CREA ativo.`
          }
        ];

        // Add conversation history
        if (messageHistory && messageHistory.length > 1) {
          messageHistory.slice(0, -1).forEach(msg => {
            messages.push({
              role: msg.role as 'user' | 'assistant',
              content: msg.content
            });
          });
        }

        // Add current message
        messages.push({
          role: 'user',
          content: message
        });

        // Call OpenAI API with retry logic
        let retryCount = 0;
        const maxRetries = 3;
        
        while (retryCount < maxRetries) {
          try {
            const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${openaiApiKey}`,
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                model: 'gpt-4o-mini',
                messages: messages,
                max_tokens: 1500,
                temperature: 0.3, // Mais t√©cnico e preciso
                top_p: 0.9,
                frequency_penalty: 0.0,
                presence_penalty: 0.0
              }),
            });

            if (openaiResponse.status === 429) {
              // Rate limit - aguarda e tenta novamente
              console.log(`Rate limit hit, retry ${retryCount + 1}/${maxRetries}`);
              await new Promise(resolve => setTimeout(resolve, (retryCount + 1) * 2000));
              retryCount++;
              continue;
            }

            if (!openaiResponse.ok) {
              throw new Error(`OpenAI API error: ${openaiResponse.status} - ${await openaiResponse.text()}`);
            }

            const openaiData = await openaiResponse.json();
            aiResponse = openaiData.choices[0].message.content;
            break; // Sucesso, sai do loop
            
          } catch (error) {
            retryCount++;
            console.error(`OpenAI attempt ${retryCount} failed:`, error);
            
            if (retryCount === maxRetries) {
              throw error; // Falha ap√≥s todas as tentativas
            }
            
            // Aguarda antes da pr√≥xima tentativa
            await new Promise(resolve => setTimeout(resolve, retryCount * 1000));
          }
        }
      } catch (openaiError) {
        console.error('OpenAI API error:', openaiError);
        aiResponse = generateContextualResponse(message, project);
      }
    } else {
      // Fallback to contextual response
      aiResponse = generateContextualResponse(message, project);
    }

    // Save AI response
    await supabase
      .from('ai_messages')
      .insert({
        conversation_id: conversation.id,
        content: aiResponse,
        role: 'assistant'
      });

    // Valida√ß√£o final da resposta
    const finalResponse = aiResponse || 'Desculpe, n√£o foi poss√≠vel gerar uma resposta no momento.';
    
    console.log('üì§ Edge Function: Sending response:', {
      response: finalResponse,
      conversationId: conversation.id,
      responseLength: finalResponse.length
    });

    return new Response(JSON.stringify({ 
      response: finalResponse,
      conversationId: conversation.id 
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in chat-assistant function:', error);
    return new Response(JSON.stringify({ error: 'Internal server error' }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

// Sistema avan√ßado de respostas contextuais para engenharia civil e arquitetura
function generateContextualResponse(question: string, project: any): string {
  const lowerQuestion = question.toLowerCase();
  
  // Base de conhecimentos t√©cnicos
  const technicalKnowledge = {
    foundation: {
      keywords: ['funda√ß√£o', 'funda√ß√µes', 'sapata', 'estaca', 'radier', 'baldrame'],
      response: (project: any) => `üèóÔ∏è **FUNDA√á√ïES - An√°lise T√©cnica**

${project ? `Para o projeto "${project.name}" (${project.total_area || '√°rea a definir'}m¬≤):` : 'Orienta√ß√£o geral sobre funda√ß√µes:'}

**Tipos recomendados conforme NBR 6122:**
‚Ä¢ **Funda√ß√µes Rasas**: Sapatas isoladas/corridas (at√© 3 pavimentos)
‚Ä¢ **Funda√ß√µes Profundas**: Estacas escavadas/h√©lice cont√≠nua (acima de 3 pavimentos)
‚Ä¢ **Radier**: Cargas distribu√≠das, solos de baixa capacidade

**Fatores determinantes:**
‚úì Investiga√ß√£o geot√©cnica obrigat√≥ria (NBR 8036)
‚úì Cargas da estrutura e tipo de solo
‚úì Presen√ßa de √°gua subterr√¢nea
‚úì Economicidade da solu√ß√£o

**Custos estimados (2024):**
‚Ä¢ Sapatas: R$ 80-120/m¬≤
‚Ä¢ Estacas escavadas: R$ 25-40/m linear
‚Ä¢ Radier: R$ 45-65/m¬≤

Precisa de dimensionamento espec√≠fico?`
    },
    
    structure: {
      keywords: ['estrutura', 'concreto', 'a√ßo', 'viga', 'pilar', 'laje', 'dimensionamento'],
      response: (project: any) => `üè¢ **ESTRUTURA - Dimensionamento e Especifica√ß√µes**

${project ? `An√°lise estrutural para "${project.name}":` : 'Orienta√ß√µes estruturais:'}

**Sistemas estruturais recomendados:**
‚Ä¢ **Concreto Armado**: Residencial at√© 4 pavimentos (NBR 6118)
‚Ä¢ **Alvenaria Estrutural**: At√© 5 pavimentos (NBR 15961)
‚Ä¢ **Estrutura Met√°lica**: V√£os grandes, rapidez executiva

**Materiais conforme norma:**
‚úì Concreto: fck ‚â• 25 MPa (residencial), fck ‚â• 30 MPa (comercial)
‚úì A√ßo CA-50 para armaduras principais
‚úì A√ßo CA-60 para estribos e distribui√ß√£o

**Custos por m¬≤ (estrutura completa):**
‚Ä¢ Concreto armado: R$ 180-250/m¬≤
‚Ä¢ Alvenaria estrutural: R$ 120-180/m¬≤
‚Ä¢ Estrutura met√°lica: R$ 200-300/m¬≤

Necessita de c√°lculo estrutural detalhado?`
    },
    
    budget: {
      keywords: ['or√ßamento', 'custo', 'pre√ßo', 'valor', 'quanto custa'],
      response: (project: any) => `üí∞ **OR√áAMENTA√á√ÉO - An√°lise de Custos**

${project ? `Or√ßamento para "${project.name}" (${project.total_area || '√°rea a definir'}m¬≤):` : 'Estimativas de custos de constru√ß√£o:'}

**Custos por m¬≤ - Padr√£o Brasileiro (2024):**

üè† **RESIDENCIAL:**
‚Ä¢ Popular: R$ 800-1.200/m¬≤
‚Ä¢ M√©dio: R$ 1.200-1.800/m¬≤
‚Ä¢ Alto: R$ 1.800-3.000/m¬≤
‚Ä¢ Luxo: R$ 3.000-5.000/m¬≤

üè¢ **COMERCIAL:**
‚Ä¢ B√°sico: R$ 1.000-1.500/m¬≤
‚Ä¢ Corporativo: R$ 1.500-2.500/m¬≤

**Composi√ß√£o t√≠pica dos custos:**
‚úì Estrutura: 15-20%
‚úì Alvenaria/Veda√ß√µes: 12-15%
‚úì Instala√ß√µes: 20-25%
‚úì Cobertura: 8-12%
‚úì Revestimentos: 15-20%
‚úì Esquadrias: 8-12%

${project?.estimated_budget ? `Or√ßamento previsto: R$ ${project.estimated_budget.toLocaleString('pt-BR')}` : ''}

Quer detalhamento por etapas?`
    },
    
    materials: {
      keywords: ['material', 'materiais', 'tijolo', 'bloco', 'cimento', 'cer√¢mica', 'especifica√ß√£o'],
      response: (project: any) => `üß± **MATERIAIS - Especifica√ß√µes T√©cnicas**

**ALVENARIA (NBR 15270):**
‚Ä¢ Tijolo cer√¢mico: 9x14x19cm - R$ 0,35-0,45/un
‚Ä¢ Bloco cer√¢mico: 14x19x29cm - R$ 1,20-1,80/un
‚Ä¢ Bloco de concreto: 14x19x39cm - R$ 2,50-3,50/un

**REVESTIMENTOS:**
‚Ä¢ Argamassa colante: R$ 18-25/saco 20kg
‚Ä¢ Cer√¢mica 45x45cm: R$ 25-60/m¬≤
‚Ä¢ Porcelanato 60x60cm: R$ 45-120/m¬≤

**COBERTURA:**
‚Ä¢ Telha cer√¢mica: R$ 2,50-4,00/m¬≤
‚Ä¢ Telha met√°lica: R$ 15-35/m¬≤
‚Ä¢ Laje impermeabilizada: R$ 45-65/m¬≤

**CRIT√âRIOS DE ESCOLHA:**
‚úì Clima e exposi√ß√£o
‚úì Durabilidade e manuten√ß√£o
‚úì Desempenho t√©rmico/ac√∫stico
‚úì Rela√ß√£o custo-benef√≠cio

${project ? `Para ${project.name}, qual material espec√≠fico?` : 'Qual material precisa especificar?'}`
    },
    
    schedule: {
      keywords: ['cronograma', 'prazo', 'tempo', 'etapas', 'dura√ß√£o'],
      response: (project: any) => `‚è±Ô∏è **CRONOGRAMA - Planejamento Executivo**

${project ? `Cronograma para "${project.name}" (${project.total_area || '√°rea a definir'}m¬≤):` : 'Prazos t√≠picos de constru√ß√£o:'}

**PRAZOS POR TIPOLOGIA:**

üè† **Residencial:**
‚Ä¢ Casa popular (at√© 80m¬≤): 6-9 meses
‚Ä¢ Casa padr√£o (80-150m¬≤): 8-12 meses
‚Ä¢ Casa alto padr√£o (+150m¬≤): 12-18 meses

üè¢ **Comercial:**
‚Ä¢ Edif√≠cio baixo (at√© 3 pav): 12-18 meses
‚Ä¢ Edif√≠cio m√©dio (4-10 pav): 18-24 meses

**ETAPAS PRINCIPAIS:**
1. **Funda√ß√µes**: 15-20% do prazo
2. **Estrutura**: 25-30% do prazo
3. **Alvenaria**: 20-25% do prazo
4. **Instala√ß√µes**: 15-20% do prazo
5. **Acabamentos**: 20-25% do prazo

**FATORES QUE INFLUENCIAM:**
‚úì Complexidade do projeto
‚úì Disponibilidade de m√£o-de-obra
‚úì Condi√ß√µes clim√°ticas
‚úì Log√≠stica de materiais

Precisa de cronograma detalhado?`
    },
    
    norms: {
      keywords: ['norma', 'nbr', 'abnt', 'c√≥digo', 'lei', 'regulamento'],
      response: (project: any) => `üìã **NORMAS T√âCNICAS - Conformidade Legal**

**NORMAS ABNT FUNDAMENTAIS:**

üèóÔ∏è **ESTRUTURAS:**
‚Ä¢ NBR 6118: Projeto de estruturas de concreto
‚Ä¢ NBR 8800: Projeto de estruturas de a√ßo
‚Ä¢ NBR 6122: Projeto e execu√ß√£o de funda√ß√µes

üè† **DESEMPENHO:**
‚Ä¢ NBR 15575: Edifica√ß√µes habitacionais - Desempenho
‚Ä¢ NBR 9050: Acessibilidade
‚Ä¢ NBR 15220: Desempenho t√©rmico

üîß **INSTALA√á√ïES:**
‚Ä¢ NBR 5410: Instala√ß√µes el√©tricas
‚Ä¢ NBR 8160: Sistemas prediais de esgoto
‚Ä¢ NBR 5626: Sistemas prediais de √°gua fria

**C√ìDIGOS MUNICIPAIS:**
‚úì C√≥digo de Obras local
‚úì Lei de Uso e Ocupa√ß√£o do Solo
‚úì Normas de seguran√ßa contra inc√™ndio

${project ? `Para o projeto em ${project.city || 'sua cidade'}, verificar legisla√ß√£o espec√≠fica.` : ''}

Qual norma espec√≠fica precisa consultar?`
    }
  };

  // Verificar palavras-chave e retornar resposta especializada
  for (const [category, data] of Object.entries(technicalKnowledge)) {
    if (data.keywords.some(keyword => lowerQuestion.includes(keyword))) {
      return data.response(project);
    }
  }

  // Respostas para sauda√ß√µes e perguntas gerais
  if (lowerQuestion.includes('ol√°') || lowerQuestion.includes('oi') || lowerQuestion.includes('bom dia') || lowerQuestion.includes('boa tarde')) {
    return project 
      ? `üèóÔ∏è Ol√°! Sou seu consultor especializado em engenharia civil e arquitetura. Estou analisando o projeto "${project.name}" e posso ajudar com:

‚úì Dimensionamento estrutural e funda√ß√µes
‚úì Or√ßamenta√ß√£o detalhada e cronograma
‚úì Especifica√ß√£o de materiais e t√©cnicas construtivas
‚úì Conformidade com normas ABNT e c√≥digos locais
‚úì Otimiza√ß√£o de custos e prazos

Em que posso ajudar especificamente?`
      : `üèóÔ∏è Ol√°! Sou seu consultor especializado em **Engenharia Civil e Arquitetura**. 

Posso ajudar com:
‚úì **Projetos estruturais** e dimensionamento
‚úì **Or√ßamenta√ß√£o** e an√°lise de custos
‚úì **Cronogramas** e planejamento executivo
‚úì **Especifica√ß√£o de materiais** e t√©cnicas
‚úì **Normas ABNT** e legisla√ß√£o construtiva

Tem algum projeto ou d√∫vida t√©cnica espec√≠fica?`;
  }

  // Resposta padr√£o t√©cnica
  return project 
    ? `üèóÔ∏è **Projeto "${project.name}" em an√°lise**

Como **Engenheiro Civil especialista**, posso orientar sobre:

üìä **An√°lise T√©cnica**: Estruturas, funda√ß√µes, materiais
üí∞ **Or√ßamenta√ß√£o**: Custos detalhados por etapa
‚è±Ô∏è **Cronograma**: Planejamento executivo otimizado
üìã **Conformidade**: Normas ABNT e c√≥digos locais

**Dados do projeto:**
‚Ä¢ √Årea: ${project.total_area || 'A definir'}m¬≤
‚Ä¢ Localiza√ß√£o: ${[project.city, project.state].filter(Boolean).join(', ') || 'A definir'}
‚Ä¢ Or√ßamento: ${project.estimated_budget ? 'R$ ' + project.estimated_budget.toLocaleString('pt-BR') : 'Em elabora√ß√£o'}

Sobre qual aspecto t√©cnico voc√™ gostaria de orienta√ß√£o?`
    : `üèóÔ∏è **Consultoria Especializada em Engenharia Civil**

Sou seu consultor t√©cnico especializado. Posso ajudar com:

üîπ **Projetos estruturais** e funda√ß√µes
üîπ **Or√ßamenta√ß√£o** profissional detalhada  
üîπ **Cronogramas** e planejamento de obra
üîπ **Materiais** e especifica√ß√µes t√©cnicas
üîπ **Normas ABNT** e legisla√ß√£o vigente

**Exemplos do que posso orientar:**
‚Ä¢ "Como dimensionar funda√ß√µes para casa de 120m¬≤?"
‚Ä¢ "Qual o custo por m¬≤ para constru√ß√£o padr√£o m√©dio?"
‚Ä¢ "Cronograma para edif√≠cio de 4 pavimentos"
‚Ä¢ "Especifica√ß√µes de materiais para regi√£o Sul"

Qual sua d√∫vida t√©cnica espec√≠fica?`;
}