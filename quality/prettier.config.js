// üé® Prettier Configuration - Check Only Mode
// Configura√ß√£o para verifica√ß√£o de formata√ß√£o sem modifica√ß√µes autom√°ticas

module.exports = {
  // ===================================================================
  // üìù CONFIGURA√á√ÉO B√ÅSICA
  // ===================================================================
  
  // Largura de linha (padr√£o Lovable/React)
  printWidth: 80,
  
  // Tamanho da indenta√ß√£o
  tabWidth: 2,
  
  // Usar espa√ßos em vez de tabs
  useTabs: false,
  
  // Ponto e v√≠rgula no final das declara√ß√µes
  semi: true,
  
  // Aspas simples em vez de duplas
  singleQuote: true,
  
  // Aspas em propriedades de objeto apenas quando necess√°rio
  quoteProps: 'as-needed',
  
  // V√≠rgula no final de arrays/objetos
  trailingComma: 'es5',
  
  // Espa√ßos dentro de chaves de objetos
  bracketSpacing: true,
  
  // Posi√ß√£o da chave de fechamento em JSX
  bracketSameLine: false,
  
  // Par√™nteses em arrow functions com um par√¢metro
  arrowParens: 'avoid',
  
  // ===================================================================
  // üìÅ CONFIGURA√á√ÉO DE ARQUIVOS
  // ===================================================================
  
  // Padr√µes de arquivos para verificar
  ignore: [
    // Build outputs
    'dist/**',
    'build/**',
    '.vite/**',
    
    // Dependencies
    'node_modules/**',
    
    // Cache directories
    '.cache/**',
    '.next/**',
    '.nuxt/**',
    
    // Config files que n√£o devem ser formatados
    'package-lock.json',
    'yarn.lock',
    'pnpm-lock.yaml',
    'bun.lockb',
    
    // Generated files
    'src/integrations/supabase/types.ts',
    
    // Quality reports
    'quality/reports/**',
    
    // Documentation builds
    'docs/.vitepress/dist/**',
  ],
  
  // ===================================================================
  // üéØ OVERRIDES POR TIPO DE ARQUIVO
  // ===================================================================
  
  overrides: [
    // ===============================
    // üìù TypeScript/JavaScript
    // ===============================
    {
      files: ['*.ts', '*.tsx', '*.js', '*.jsx'],
      options: {
        parser: 'typescript',
        singleQuote: true,
        trailingComma: 'es5',
        semi: true,
      },
    },
    
    // ===============================
    // üé® CSS/SCSS/Less
    // ===============================
    {
      files: ['*.css', '*.scss', '*.less'],
      options: {
        parser: 'css',
        singleQuote: false, // CSS usa aspas duplas
      },
    },
    
    // ===============================
    // üìÑ Markdown
    // ===============================
    {
      files: ['*.md', '*.mdx'],
      options: {
        parser: 'markdown',
        printWidth: 80,
        proseWrap: 'preserve',
        singleQuote: false,
      },
    },
    
    // ===============================
    // üìã JSON/YAML
    // ===============================
    {
      files: ['*.json', '*.jsonc'],
      options: {
        parser: 'json',
        trailingComma: 'none',
      },
    },
    {
      files: ['*.yml', '*.yaml'],
      options: {
        parser: 'yaml',
        singleQuote: true,
      },
    },
    
    // ===============================
    // üîß Config Files
    // ===============================
    {
      files: [
        '*.config.js',
        '*.config.ts',
        '*.config.mjs',
        'vite.config.*',
        'tailwind.config.*',
        'eslint.config.*',
      ],
      options: {
        printWidth: 100, // Configs podem ser mais largos
        singleQuote: true,
      },
    },
    
    // ===============================
    // ‚öõÔ∏è React/JSX Espec√≠fico
    // ===============================
    {
      files: ['*.tsx', '*.jsx'],
      options: {
        jsxSingleQuote: true,
        bracketSameLine: false,
        htmlWhitespaceSensitivity: 'css',
      },
    },
  ],
  
  // ===================================================================
  // üé® CONFIGURA√á√ïES ESPEC√çFICAS TAILWIND
  // ===================================================================
  
  // Plugin para organizar classes Tailwind
  plugins: [
    // Descomentado apenas se o plugin estiver instalado
    // 'prettier-plugin-tailwindcss',
  ],
  
  // Configura√ß√£o do plugin Tailwind (se ativo)
  tailwindConfig: './tailwind.config.ts',
  
  // ===================================================================
  // üîç CONFIGURA√á√ïES DE VERIFICA√á√ÉO
  // ===================================================================
  
  // Configura√ß√µes espec√≠ficas para check-only mode
  // (usado via CLI: prettier --check)
  
  // Ignorar warnings sobre parser
  requirePragma: false,
  insertPragma: false,
  
  // Configura√ß√£o de fim de linha (auto-detect)
  endOfLine: 'lf',
  
  // ===================================================================
  // üìä CONFIGURA√á√ïES DE RELAT√ìRIO
  // ===================================================================
  
  // Configura√ß√µes para relat√≥rios de qualidade
  // (n√£o s√£o op√ß√µes nativas do Prettier, mas usadas em scripts)
  _qualityConfig: {
    // Formato do relat√≥rio
    reportFormat: 'detailed', // 'detailed' | 'summary' | 'json'
    
    // Arquivos cr√≠ticos que devem sempre estar formatados
    criticalFiles: [
      'src/App.tsx',
      'src/main.tsx',
      'src/lib/utils.ts',
      'src/integrations/supabase/client.ts',
    ],
    
    // Limite de arquivos n√£o formatados para warning
    warningThreshold: 5,
    
    // Limite de arquivos n√£o formatados para error
    errorThreshold: 20,
  },
};

// ===================================================================
// üìã INSTRU√á√ïES DE USO
// ===================================================================
/*

üîç VERIFICA√á√ÉO (Check-only):
npm run quality:prettier

üìä RELAT√ìRIO DETALHADO:
npm run quality:prettier:report

üéØ VERIFICAR ARQUIVO ESPEC√çFICO:
npx prettier --check src/App.tsx

üìÅ VERIFICAR DIRET√ìRIO:
npx prettier --check "src/**/*.{ts,tsx}"

üö® IGNORAR ARQUIVO:
Adicionar ao array 'ignore' acima ou criar .prettierignore

‚öôÔ∏è INTEGRA√á√ÉO COM ESLINT:
Usar eslint-config-prettier para evitar conflitos

üìà M√âTRICAS:
- Arquivos verificados
- Arquivos n√£o formatados
- Tempo de verifica√ß√£o
- Problemas por tipo

*/